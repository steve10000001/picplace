import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'dart:io';
import 'dart:ui' as ui;
import 'package:path_provider/path_provider.dart';
import 'package:flutter/rendering.dart';
import 'dart:typed_data';

void main() {
  runApp(PicPlaceApp());
}

class PicPlaceApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'PicPlace',
      theme: ThemeData(
        primarySwatch: Colors.teal,
      ),
      home: HomeScreen(),
    );
  }
}

class HomeScreen extends StatefulWidget {
  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  List<_PlacedImage> _images = [];
  File? _background;
  final GlobalKey _canvasKey = GlobalKey();

  Future<void> _pickImage() async {
    final pickedFile = await ImagePicker().pickImage(source: ImageSource.gallery);
    if (pickedFile != null) {
      setState(() {
        _images.add(_PlacedImage(
          file: File(pickedFile.path),
          scale: 1.0,
          offset: Offset.zero,
        ));
      });
    }
  }

  Future<void> _pickBackground() async {
    final pickedFile = await ImagePicker().pickImage(source: ImageSource.gallery);
    if (pickedFile != null) {
      setState(() {
        _background = File(pickedFile.path);
      });
    }
  }

  Future<void> _exportCanvas() async {
    try {
      RenderRepaintBoundary boundary = _canvasKey.currentContext!.findRenderObject() as RenderRepaintBoundary;
      ui.Image image = await boundary.toImage(pixelRatio: 3.0);
      ByteData? byteData = await image.toByteData(format: ui.ImageByteFormat.png);
      Uint8List pngBytes = byteData!.buffer.asUint8List();

      final directory = await getApplicationDocumentsDirectory();
      final path = '${directory.path}/picplace_layout.png';
      File(path).writeAsBytes(pngBytes);
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Layout saved to: $path')),
      );
    } catch (e) {
      print(e);
    }
  }

  void _showPlacementTips() {
    showDialog(
      context: context,
      builder: (ctx) => AlertDialog(
        title: Text('Placement Tips'),
        content: Text(
          '• Use painter\'s tape to mock frame placement\n'
          '• Keep picture center at eye level (around 57")\n'
          '• Use a level for straight alignment\n'
          '• Try grouping smaller frames in odd numbers\n'
          '• Consider spacing: 2-5 inches between pictures.'
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(ctx).pop(),
            child: Text('Got it'),
          )
        ],
      ),
    );
  }

  Widget _buildCanvas() {
    return RepaintBoundary(
      key: _canvasKey,
      child: Container(
        height: 500,
        width: double.infinity,
        decoration: _background != null
            ? BoxDecoration(
                image: DecorationImage(
                  image: FileImage(_background!),
                  fit: BoxFit.cover,
                ),
              )
            : BoxDecoration(color: Colors.grey[200]),
        child: Stack(
          children: _images.map((img) {
            int index = _images.indexOf(img);
            return Positioned(
              left: img.offset.dx,
              top: img.offset.dy,
              child: GestureDetector(
                onScaleUpdate: (details) {
                  setState(() {
                    img.scale = details.scale;
                    img.offset += details.focalPointDelta;
                  });
                },
                child: Transform.translate(
                  offset: Offset.zero,
                  child: Transform.scale(
                    scale: img.scale,
                    child: Image.file(
                      img.file,
                      width: 150,
                    ),
                  ),
                ),
              ),
            );
          }).toList(),
        ),
      ),
    );
  }

  void _clearCanvas() {
    setState(() {
      _images.clear();
      _background = null;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('PicPlace - Picture Hanging Guide'),
        actions: [
          IconButton(
            icon: Icon(Icons.info_outline),
            onPressed: _showPlacementTips,
          ),
          IconButton(
            icon: Icon(Icons.delete_outline),
            onPressed: _clearCanvas,
          ),
          IconButton(
            icon: Icon(Icons.save_alt),
            onPressed: _exportCanvas,
          )
        ],
      ),
      body: Column(
        children: [
          Expanded(child: _buildCanvas()),
          Padding(
            padding: const EdgeInsets.all(12.0),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                ElevatedButton.icon(
                  onPressed: _pickImage,
                  icon: Icon(Icons.add_photo_alternate),
                  label: Text('Add Picture'),
                ),
                ElevatedButton.icon(
                  onPressed: _pickBackground,
                  icon: Icon(Icons.image_outlined),
                  label: Text('Set Background'),
                ),
              ],
            ),
          )
        ],
      ),
    );
  }
}

class _PlacedImage {
  File file;
  double scale;
  Offset offset;

  _PlacedImage({required this.file, this.scale = 1.0, this.offset = Offset.zero});
}
